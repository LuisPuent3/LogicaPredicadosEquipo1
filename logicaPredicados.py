from sympy import symbols
from sympy.logic.boolalg import Implies, And, Not
from sympy.logic.inference import satisfiable  # CorrecciÃ³n del import

# ğŸ“Œ Definir predicados (variables lÃ³gicas)
P, Q = symbols('P Q')  # P = "Es un mamÃ­fero", Q = "Tiene pelo"

# ğŸ“Œ Regla lÃ³gica: "Si es un mamÃ­fero, entonces tiene pelo" â†’ (P â†’ Q)
regla = Implies(P, Q)

# ğŸ“Œ Evaluar la regla en diferentes casos
casos = [{P: True, Q: True}, {P: True, Q: False}, {P: False, Q: True}]
resultados = [regla.subs(caso) for caso in casos]

# ğŸ“Œ Comprobar validez en todos los posibles valores de P y Q
valida = all(regla.subs({P: p, Q: q}) for p in [True, False] for q in [True, False])

# ğŸ“Œ Verificar si existe un caso donde P sea verdadero y Q falso (esto invalidarÃ­a la regla)
es_confiable = not satisfiable(And(P, Not(Q)))

# ğŸ“Œ Imprimir resultados
print("Regla lÃ³gica:", regla)
print("EvaluaciÃ³n de casos:", dict(zip(map(str, casos), resultados)))
print("Â¿La regla es siempre vÃ¡lida?", valida)
print("Â¿Siempre que es mamÃ­fero, tiene pelo?", es_confiable)
